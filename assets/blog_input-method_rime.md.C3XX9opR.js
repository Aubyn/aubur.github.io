import{_ as s,c as a,a0 as t,o as e}from"./chunks/framework.D9MR4Zbk.js";const k=JSON.parse('{"title":"rime","description":"","frontmatter":{},"headers":[],"relativePath":"blog/input-method/rime.md","filePath":"blog/input-method/rime.md"}'),l={name:"blog/input-method/rime.md"};function n(r,i,h,p,o,c){return e(),a("div",null,i[0]||(i[0]=[t(`<h1 id="rime" tabindex="-1">rime <a class="header-anchor" href="#rime" aria-label="Permalink to &quot;rime&quot;">​</a></h1><h2 id="是什么" tabindex="-1">是什么 <a class="header-anchor" href="#是什么" aria-label="Permalink to &quot;是什么&quot;">​</a></h2><p>rime 是输入法引擎（librime），提供了将输入内容转为候选词等的能力。基于此引擎，诞生了使用与 Android/Windows/MacOS 等平台的输入法 GUI 软件。实现文字输入。</p><h2 id="为什么" tabindex="-1">为什么 <a class="header-anchor" href="#为什么" aria-label="Permalink to &quot;为什么&quot;">​</a></h2><p><strong>网络隐私</strong>是首先考虑的因素。各家输入法有各种各样的联网操作，可能获取我们输入的内容和剪切板中的内容。在赋予语音权限之后，更有隐式录制语音的操作。基于 rime 的输入法普遍不联网（需持续验证）。</p><p><strong>庞大词库，可定制词库</strong>是其次。主要是指词库较丰富，在不联网的情况下能提供更好的打字手感，无需困难地查找候选即可选中目标字词。rime 有庞大的第三方词库可以优化候选，如：薄荷输入法、雾凇词库等。</p><div class="info custom-block"><p class="custom-block-title">配置不再劝退</p><p>随着薄荷输入法等配置的发展，rime 从难以配置变得越来越实用。</p></div><p><strong>可定制的输入方案</strong>也是重要因素。除了全拼，我们可能会接触各种别的输入方案，双拼（自然码、小鹤等）、五笔（虎码等），系统自带输入法无法满足个人喜爱的输入方案时，rime 往往成为唯一的选择项。</p><h2 id="如何使用" tabindex="-1">如何使用 <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;如何使用&quot;">​</a></h2><ol><li>下载对应平台的 rime GUI 软件，见 <a href="https://github.com/rime" target="_blank" rel="noreferrer">RIME</a>，安装</li><li>下载<a href="https://github.com/Mintimate/oh-my-rime" target="_blank" rel="noreferrer">薄荷输入法</a>，解压解压薄荷输入法</li><li>启用需要用到的输入方案：default.yaml，取消注释 schema_list 中的项</li><li>添加需要用到的自定义短语：custom_simple.dict.yaml（注意缩进使用 tab，不能用空格）</li><li>将解压的薄荷输入法配置移动至 rime 的用户目录（状态栏 rime 图标右击可进入）</li><li>重新部署（状态栏 rime 图标右击重新部署）</li></ol><h2 id="linux-中使用" tabindex="-1">Linux 中使用 <a class="header-anchor" href="#linux-中使用" aria-label="Permalink to &quot;Linux 中使用&quot;">​</a></h2><p>配置文件路径：<code>~/.local/share/fcitx5/rime/</code></p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cp</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./oh-my-rime-main/</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">*</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ~/.local/share/fcitx5/rime/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># linux 中，更新 rime 配置后，需要触发其重新部署</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">qdbus</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.fcitx.Fcitx5</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /controller</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> org.fcitx.Fcitx.Controller1.SetConfig</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;fcitx://config/addo</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">n/rime/deploy&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;&quot;</span></span></code></pre></div><p>自定义短语</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># ~/.local/share/fcitx5/rime/dicts/custom_simple.dict.yaml</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">○	bt	100</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">■	bt	100</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">□	bt	100</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">☆	xf	100</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">-&gt;	jt	100</span></span></code></pre></div>`,15)]))}const m=s(l,[["render",n]]);export{k as __pageData,m as default};
